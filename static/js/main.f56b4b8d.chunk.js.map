{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","container","card","infected","recovered","deaths","Cards","_ref","_ref$data","data","confirmed","lastUpdate","react_default","a","createElement","className","styles","Grid","spacing","justify","item","component","Card","xs","md","cx","CardContent","Typography","color","gutterBottom","variant","build_default","start","end","value","duration","separator","Date","toDateString","url","fetchData","Object","asyncToGenerator","regenerator_default","mark","_callee","country","changeableUrl","_yield$axios$get","_yield$axios$get$data","wrap","_context","prev","next","concat","axios","get","sent","abrupt","t0","stop","_x","apply","this","arguments","fetchDailyData","_ref2","_callee2","_yield$axios$get2","modifiedData","_context2","map","dailyData","total","date","reportDate","fetchCountries","_ref3","_callee3","_yield$axios$get3","countries","_context3","name","Chart","_useState","useState","_useState2","slicedToArray","setDailyData","useEffect","t1","fetchAPI","barChart","es","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","_ref4","borderColor","fill","_ref5","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","_this","setState","_this$state","image","src","coronaImage","alt","components_Cards_Cards","components_CountryPicker_CountryPicker","components_Chart_Chart","React","Component","ReactDOM","render","src_App","document","getElementById","__webpack_require__","p"],"mappings":"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","file":"static/js/main.f56b4b8d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__iUHBB\",\"card\":\"Cards_card__3dgiR\",\"infected\":\"Cards_infected__3KiAE\",\"recovered\":\"Cards_recovered__1JukL\",\"deaths\":\"Cards_deaths__-_cR-\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\n\r\nconst Cards = ({ data: {confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if(!confirmed){\r\n        return \"Loading...\";\r\n    }\r\n \r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs ={12} md={3}className= {cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                            start = {0}\r\n                            end = {confirmed.value}\r\n                            duration = { 2.5}\r\n                            separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" >\r\n                           {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                           Number of active cases in COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs ={12} md={3} className= {cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                         Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                            start = {0}\r\n                            end = {recovered.value}\r\n                            duration = { 2.5}\r\n                            separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" >\r\n                           {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                           Number of recoveries from  COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs ={12} md={3} className= {cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                          Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                            start = {0}\r\n                            end = {deaths.value}\r\n                            duration = { 2.5}\r\n                            separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" >\r\n                           {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                           Number of deaths cause by COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) =>{\r\n    let changeableUrl = url;\r\n\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n    \r\n    return  {  confirmed, recovered, deaths, lastUpdate};\r\n    }\r\n\r\n    catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n            const {data} = await axios.get( `${url}/daily`);\r\n        \r\n        const modifiedData = data.map((dailyData) =>( {\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        return modifiedData;\r\n    }\r\n\r\n    catch(error){\r\n\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data: {countries }} = await axios.get (`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n    }\r\n    catch(error)\r\n    {\r\n        return error;\r\n    }\r\n}","import React,{ useState, useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\n\r\nconst Chart = ( {data: {confirmed,deaths,recovered}, country}) => {\r\n    \r\n    const   [dailyData,setDailyData ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n          setDailyData( await fetchDailyData());\r\n        }\r\n     \r\n        fetchAPI();\r\n    },[]);\r\n\r\n    const barChart =(\r\n      confirmed\r\n        ? (\r\n            <Bar\r\n            data={{\r\n                labels: ['Infected', 'Recovered' , 'Deaths'],\r\n                datasets: [{\r\n                    label: 'People',\r\n                    backgroundColor: ['blue','RGB(0, 255, 0)','red'],\r\n                   \r\n                    \r\n                    data: [confirmed.value, recovered.value, deaths.value],\r\n                }],\r\n\r\n            }}\r\n            options={{\r\n                legend: {display:false},\r\n                title: {display: true, text: `Current state in ${country}`},\r\n            }}\r\n            />\r\n        ) : null\r\n    );\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n            ? (\r\n                <Line \r\n                data={{\r\n                    labels : dailyData.map(({ date }) => date),\r\n                    datasets: [{\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label:'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true,\r\n\r\n                }, {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label:'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                        fill: true,\r\n                }],\r\n            }}\r\n        />) : null\r\n    );\r\n\r\n    return(\r\n        <div className={styles.container}> \r\n                {country ?  barChart : lineChart}\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, {useState,useEffect} from 'react';\r\nimport {NativeSelect,FormControl } from '@material-ui/core';\r\n\r\nimport {fetchCountries } from '../../api';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () =>{\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n\r\n\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value = \"\">Global</option>\r\n                {fetchedCountries.map((country,i) => <option key={i} value={country}>{country}</option> )}\r\n            </NativeSelect>\r\n        </FormControl>\r\n       \r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\n\r\n\r\nimport {Cards,Chart,CountryPicker} from './components';\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api';\r\n\r\nimport coronaImage from './images/image.png';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        data: {},\r\n        country: '',\r\n    }\r\n\r\n \r\n    async componentDidMount (){\r\n        const fetchedData = await fetchData();\r\n\r\n        this.setState({ data: fetchedData});\r\n    }\r\n\r\n    handleCountryChange = async(country) =>{\r\n        const fetchedData = await fetchData(country);\r\n\r\n        this.setState({ data: fetchedData, country: country});\r\n\r\n    }\r\n    \r\n    render(){\r\n        const { data,country } = this.state;\r\n\r\n        return(  \r\n        \r\n    \r\n      \r\n            \r\n            <div className={styles.container}>\r\n                <img className ={styles.image} src={coronaImage} alt= \"COVID-19\" />\r\n                <Cards data={data} />\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} /> \r\n                <Chart data={data} country={country}/>\r\n                       \r\n            </div>  \r\n              \r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById ('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1xVo2\",\"image\":\"App_image__2dV0p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1Lok5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__342Fm\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}